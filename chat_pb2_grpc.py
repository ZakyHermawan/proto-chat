# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class ChatterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sendMessage = channel.unary_unary(
                '/chat.Chatter/sendMessage',
                request_serializer=chat__pb2.MessageRequest.SerializeToString,
                response_deserializer=chat__pb2.MessageRequest.FromString,
                )
        self.register = channel.unary_unary(
                '/chat.Chatter/register',
                request_serializer=chat__pb2.RegisterRequest.SerializeToString,
                response_deserializer=chat__pb2.StatusResponse.FromString,
                )
        self.findPair = channel.unary_unary(
                '/chat.Chatter/findPair',
                request_serializer=chat__pb2.FindPairRequest.SerializeToString,
                response_deserializer=chat__pb2.StatusResponse.FromString,
                )
        self.connectPair = channel.unary_unary(
                '/chat.Chatter/connectPair',
                request_serializer=chat__pb2.ConnectPairRequest.SerializeToString,
                response_deserializer=chat__pb2.PairConnection.FromString,
                )
        self.getFromQueue = channel.unary_stream(
                '/chat.Chatter/getFromQueue',
                request_serializer=chat__pb2.ReadQueueRequest.SerializeToString,
                response_deserializer=chat__pb2.MessageRequest.FromString,
                )


class ChatterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def sendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findPair(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def connectPair(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFromQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.sendMessage,
                    request_deserializer=chat__pb2.MessageRequest.FromString,
                    response_serializer=chat__pb2.MessageRequest.SerializeToString,
            ),
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=chat__pb2.RegisterRequest.FromString,
                    response_serializer=chat__pb2.StatusResponse.SerializeToString,
            ),
            'findPair': grpc.unary_unary_rpc_method_handler(
                    servicer.findPair,
                    request_deserializer=chat__pb2.FindPairRequest.FromString,
                    response_serializer=chat__pb2.StatusResponse.SerializeToString,
            ),
            'connectPair': grpc.unary_unary_rpc_method_handler(
                    servicer.connectPair,
                    request_deserializer=chat__pb2.ConnectPairRequest.FromString,
                    response_serializer=chat__pb2.PairConnection.SerializeToString,
            ),
            'getFromQueue': grpc.unary_stream_rpc_method_handler(
                    servicer.getFromQueue,
                    request_deserializer=chat__pb2.ReadQueueRequest.FromString,
                    response_serializer=chat__pb2.MessageRequest.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.Chatter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Chatter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def sendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chatter/sendMessage',
            chat__pb2.MessageRequest.SerializeToString,
            chat__pb2.MessageRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chatter/register',
            chat__pb2.RegisterRequest.SerializeToString,
            chat__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def findPair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chatter/findPair',
            chat__pb2.FindPairRequest.SerializeToString,
            chat__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def connectPair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chatter/connectPair',
            chat__pb2.ConnectPairRequest.SerializeToString,
            chat__pb2.PairConnection.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFromQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chat.Chatter/getFromQueue',
            chat__pb2.ReadQueueRequest.SerializeToString,
            chat__pb2.MessageRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
